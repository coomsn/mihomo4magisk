#!/system/bin/sh

# mihomo only
# redir-host need nat chain for dns redirect
# fake-ip need one proxy for dns out and one rule for dns redirect, but it's no need nat
# - { name: dns-out, type: dns }
# DST-PORT,53,dns-out Must be placed first
# - DST-PORT,53,dns-out
# Tony's note

clear; cd "${0%/*}"
source ${0%/*}/settings.ini
prepare_clash
uid_filter() {
[ -f "uids.list" ] && rm "uids.list"
uid=""; uids=""
for package_name in ${package_list[@]}; do
    uid=$(busybox awk -v package="${package_name}" '$1 ~ package {print $2}' /data/system/packages.list)
    [ -n "${uid}" ] && uids+=("${uid}")
    echo "${package_name}: ${uid}" >> ${0%/*}/uids.list
done
}
start_proxy() {
  if [ -f "${Bin}" ]; then
    chmod 755 ${Bin}
    chown root:net_admin ${Bin}
    
    if [[ "${enhanced_mode}" == "fake-ip" ]] ; then
      echo "The current working mode is fake ip, and there is no need to redirect the DNS port."
    elif [[ "${enhanced_mode}" == "redir-host" ]] ; then
      executeDnsRedirectRules
    else
      echo "You entered the wrong working mode."
    fi
    
    executeProxyRules > /dev/null 2>&1
    executeLocalBlock
    executeDisable_QUIC
    ulimit -SHn 1000000
    nohup busybox setuidgid ${box_user}:${box_group} ${Bin} -f ${config_file} -d ${work_dir} > /dev/null 2>&1 &
  fi
  echo $enhanced_mode > ./enhanced
}
stop_proxy() {
  PID=$(pidof ${Bin})
  pidof ${Bin} > /dev/null 2>&1 && kill -15 ${PID} > /dev/null 2>&1
  
  if [[ "${enhanced_mode}" == "redir-host" ]] ; then
    deleteDnsRedirectRules
  fi
  
  executeDeleteLocalBlock
  if [ "${mode}" = "tproxy" ]; then
    executeDeleteProxyRules
  fi
  deleteDisable_QUIC
  delete_task
  rm ${0%/*}/*.list
  rm ${0%/*}/enhanced
}
net_ip() {
  local_ip=$(ip route get 1.1.1.1 | awk '{for(i=1;i<=NF;i++) if ($i=="src") {print $(i+1); break}}') && echo "${local_ip}"
}
net_id() {
# get wifi ssid
  ssid=$(iw dev wlan0 link | grep -i ssid | awk '{for(i=1;i<=NF;i++) if ($i=="SSID:") {print $(i+1); break}}')
  [ -z "$ssid" ] && echo "mobile" || echo "${ssid}"
}
createProxyRules() {
  # Create routes and rules
  ${1} rule add fwmark "${fwmark}" table ${2}  pref $(expr ${2} \* 10)
  ${1} route add local default dev lo table ${2}
  # Create custom chain
  ${3} -t mangle -N ${4}_EXTERNAL
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -N ${4}_LOCAL
  ${3} -t mangle -F ${4}_LOCAL
  # Create external custom chain rules
  for subnet in ${5}; do
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -j RETURN
  done
  
  ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}

if [ "${ap_list}" != "" ]; then
  for ap in ${ap_list[@]} ; do
    ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
    ${3} -t mangle -A ${4}_EXTERNAL -p udp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
  done
fi  
  ${3} -t mangle -A ${4}_EXTERNAL -m socket -j RETURN
  # Create internal custom chain rules
  ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN
  
  if [[ "${enhanced_mode}" != "fake-ip" ]] ; then
    ${3} -t mangle -A ${4}_LOCAL -p udp --dport 53 -j RETURN
  fi
  
  for subnet in ${5}; do
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -j RETURN
  done
  
  if [[ "${list_mode}" == "blacklist" ]] ; then
    for appid in ${6}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j RETURN
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp -j RETURN
    done
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
  fi
  if [[ "${list_mode}" == "whitelist" ]] ; then
    for appid in ${6}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j MARK --set-mark ${fwmark}
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp -j MARK --set-mark ${fwmark}
    done
    if [ -n "${AIDs}" ]; then
      for AID in ${AIDs[*]}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p tcp -j MARK --set-mark ${fwmark}
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p udp -j MARK --set-mark ${fwmark}
      done
    else
        echo "Variable is empty"
    fi
  fi

  ${3} -t mangle -N ${4}_DIVERT
  ${3} -t mangle -F ${4}_DIVERT
  ${3} -t mangle -A ${4}_DIVERT -j MARK --set-mark "${fwmark}"
  ${3} -t mangle -A ${4}_DIVERT -j ACCEPT

  # Referencing custom chains
  ${3} -t mangle -A PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -I OUTPUT -j ${4}_LOCAL
  ${3} -t mangle -I PREROUTING -p tcp -m socket -j ${4}_DIVERT
  if [ ${list_switch} = true ]; then
    local list_name=$(echo ${3} | busybox awk '{print $1}')
    ${3} -t mangle -L -nv > ${0%/*}/${list_name}_mangle_rules.list
  fi
}
executeProxyRules() {
  createProxyRules ip "${table}" "${IPV}" "${Bin##*/}" "${intranet[*]}" "${uids[*]}"
  if [ "${ip6tables_switch}" = true ]; then
    createProxyRules "ip -6" "$(expr ${table} \* 2)" "${IP6V}" "${Bin##*/}6" "${intranet6[*]}" "${uids[*]}"
  fi
}
deleteProxyRules() {
  ${1} rule del fwmark "${fwmark}" table ${2} pref $(expr ${2} \* 10)
  ${1} route del local default dev lo table ${2}
  ${1} route flush table ${2}
  # First, delete the reference chain, otherwise the custom chain cannot be deleted.
  ${3} -t mangle -D PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -D OUTPUT -j ${4}_LOCAL
  ${3} -t mangle -D PREROUTING -p tcp -m socket -j ${4}_DIVERT
  # Secondly, delete the custom rules of the custom chain.
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -F ${4}_DIVERT
  # Finally, delete the custom chain.
  ${3} -t mangle -X ${4}_EXTERNAL
  ${3} -t mangle -X ${4}_LOCAL
  ${3} -t mangle -X ${4}_DIVERT
}
executeDeleteProxyRules() {
  deleteProxyRules ip "${table}" "${IPV}" "${Bin##*/}"
  if [ "${ip6tables_switch}" = true ]; then
    deleteProxyRules "ip -6" "$(expr ${table} \* 2)" "${IP6V}" "${Bin##*/}6"
  fi
}
create_task() {
  if pgrep busybox crond > /dev/null ; then
    kill -9 $(pgrep busybox crond)
  fi
    echo "0 */12 * * * touch /data/adb/modules/mihomo-module/disable && sleep 3 && rm /data/adb/modules/mihomo-module/disable" > ${0%/*}/root
    nohup busybox crond -c ${0%/*}/ > /dev/null 2>&1 &
    echo -e "${green}New task:\n$(busybox crontab -l -c ${0%/*}/)${normal}"
}
delete_task() {
  if pgrep busybox crond > /dev/null ; then
    kill -9 $(pgrep busybox crond)
    rm ${0%/*}/root > /dev/null 2>&1
  fi
}
# work chain 
run_proxy() {
  stop_proxy
  uid_filter
  create_task
  start_proxy
}
# created by tony

  # Disable QUIC
Disable_QUIC() {
  if [ "${quic}" = "disable" ]; then
    ${1} ${2} OUTPUT -p udp --dport 443 -m owner ! --gid-owner ${box_group} -j REJECT
    ${1} ${2} OUTPUT -p udp --dport 80 -m owner ! --gid-owner ${box_group} -j REJECT
  fi
}

executeDisable_QUIC() {
  Disable_QUIC "${IPV}" "-A"
  Disable_QUIC "${IP6V}" "-A"
}

deleteDisable_QUIC() {
  Disable_QUIC "${IPV}" "-D"
  Disable_QUIC "${IP6V}" "-D"
}

# DNS
executeDnsRedirectRules() {
  iptables -t nat -N mihomo_DNS_EXTERNAL
  iptables -t nat -F mihomo_DNS_EXTERNAL
  iptables -t nat -N mihomo_DNS_LOCAL
  iptables -t nat -F mihomo_DNS_LOCAL

  iptables -t nat -A mihomo_DNS_EXTERNAL -p udp -m udp --dport 53 -j REDIRECT --to-ports ${dns_port}

  iptables -t nat -A mihomo_DNS_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN
  iptables -t nat -A mihomo_DNS_LOCAL -p udp -m udp --dport 53 -j REDIRECT --to-ports ${dns_port}

  iptables -t nat -I PREROUTING -j mihomo_DNS_EXTERNAL
  iptables -t nat -I OUTPUT -j mihomo_DNS_LOCAL
  
  if [ -n "${fake_ip_range}" ]; then
    iptables -t nat -I OUTPUT -d "${fake_ip_range}" -p icmp -j DNAT --to-destination 127.0.0.1
    iptables -t nat -I PREROUTING -d "${fake_ip_range}" -p icmp -j DNAT --to-destination 127.0.0.1
  fi
}

deleteDnsRedirectRules() {
  iptables -t nat -D PREROUTING -j mihomo_DNS_EXTERNAL
  iptables -t nat -D OUTPUT -j mihomo_DNS_LOCAL

  iptables -t nat -F mihomo_DNS_EXTERNAL
  iptables -t nat -F mihomo_DNS_LOCAL
  
  iptables -t nat -X mihomo_DNS_EXTERNAL
  iptables -t nat -X mihomo_DNS_LOCAL
  
  if [ -n "${fake_ip_range}" ]; then
    iptables -t nat -D OUTPUT -d "${fake_ip_range}" -p icmp -j DNAT --to-destination 127.0.0.1
    iptables -t nat -D PREROUTING -d "${fake_ip_range}" -p icmp -j DNAT --to-destination 127.0.0.1
  fi
}

# This rule blocks local access to tproxy-port to prevent traffic loopback.

# Function to create and set up local block
LocalBlock() {
  ${1} -N ${2}_LOCAL_BLOCK
  ${1} -F ${2}_LOCAL_BLOCK
  
  ${1} -A ${2}_LOCAL_BLOCK -p tcp -m owner --uid-owner ${box_user} --gid-owner "${box_group}" -m tcp --dport "${tp_port}" -j REJECT
  
case "${1}" in
  *iptables*)
    "${1}" -A OUTPUT -d 127.0.0.1 -j "${2}_LOCAL_BLOCK"
    ;;
  *ip6tables*)
    "${1}" -A OUTPUT -d ::1 -j "${2}_LOCAL_BLOCK"
    ;;
esac
}

# Function to execute local block setup
executeLocalBlock() {
  LocalBlock "${IPV}" "${Bin##*/}"
  if [ "${ip6tables_switch}" = true ]; then
    LocalBlock "${IP6V}" "${Bin##*/}6"
  fi
}

# Function to delete local block
DeleteLocalBlock() {
case "${1}" in
  *iptables*)
    "${1}" -D OUTPUT -d 127.0.0.1 -j "${2}_LOCAL_BLOCK"
    ;;
  *ip6tables*)
    "${1}" -D OUTPUT -d ::1 -j "${2}_LOCAL_BLOCK"
    ;;
esac
  ${1} -F ${2}_LOCAL_BLOCK
  ${1} -X ${2}_LOCAL_BLOCK
}

# Function to execute delete local block
executeDeleteLocalBlock() {
  DeleteLocalBlock "${IPV}" "${Bin##*/}"
  if [ "${ip6tables_switch}" = true ]; then
    DeleteLocalBlock "${IP6V}" "${Bin##*/}6"
  fi
}
