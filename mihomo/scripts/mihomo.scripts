#!/system/bin/sh
clear; cd "${0%/*}"
source ${0%/*}/settings.ini
uid_filter() {
[ -f "uids.list" ] && rm "uids.list"
uid=""; uids=""
for package_name in ${package_list[@]}; do
    uid=$(busybox awk -v package="${package_name}" '$1 ~ package {print $2}' /data/system/packages.list)
    [ -n "${uid}" ] && uids+=("${uid}")
    echo "${package_name}: ${uid}" >> ${0%/*}/uids.list
done
}
start_proxy() {
  if [ -f "${Bin}" ]; then
    chmod 755 ${Bin}
    chown root:root ${Bin}
    executeProxyRules > /dev/null 2>&1
    ulimit -SHn 1000000
    nohup busybox setuidgid 0:${gid} ${Bin} -f ${config_file} -d ${work_dir} > /dev/null 2>&1 &
  fi
}
stop_proxy() {
  PID=$(pidof ${Bin})
  pidof ${Bin} > /dev/null 2>&1 && kill -15 ${PID} > /dev/null 2>&1
  if [ "${mode}" = "tproxy" ]; then
    executDeleteProxyRules
  fi
  delete_task
  rm ${0%/*}/*.list
}
net_ip() {
  local_ip=$(ip route get 1.1.1.1 | awk '{for(i=1;i<=NF;i++) if ($i=="src") {print $(i+1); break}}') && echo "${local_ip}"
}
net_id() {
# get wifi ssid
  ssid=$(iw dev wlan0 link | grep -i ssid | awk '{for(i=1;i<=NF;i++) if ($i=="SSID:") {print $(i+1); break}}')
  [ -z "$ssid" ] && echo "mobile" || echo "${ssid}"
}
createProxyRules() {
  # Create routes and rules
  ${1} rule add fwmark "${fwmark}" table ${2}  pref $(expr ${2} \* 10)
  ${1} route add local default dev lo table ${2}
  # Create custom chain
  ${3} -t mangle -N ${4}_EXTERNAL
  ${3} -t mangle -N ${4}_LOCAL
  # Create external custom chain rules
  for subnet in ${5}; do
    [[ "${subnet}" == "192.168.0.0/16" ]] && \
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN || \
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -p udp -j RETURN
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -p tcp -j RETURN
  done
  
  ${3} -t mangle -A ${4}_EXTERNAL -p tcp -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp ! --dport 53 -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp --dport 53 -j TPROXY --on-port 1053 --tproxy-mark ${fwmark}
  
  # Create internal custom chain rules
  ${3} -t mangle -A ${4}_LOCAL -m owner --gid-owner ${gid} -j RETURN
  ${3} -t mangle -A ${4}_LOCAL -p tcp -m mark --mark ${fwmark} -j RETURN
  ${3} -t mangle -A ${4}_LOCAL -p udp -m mark --mark ${fwmark} -j RETURN
  for subnet in ${5}; do
    [[ "${subnet}" == "192.168.0.0/16" ]] && \
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN || \
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -p udp -j RETURN
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -p tcp -j RETURN
  done
  if [[ "${list_mode}" == "blacklist" ]] ; then
    for appid in ${6}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j RETURN
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp ! --dport 53 -j RETURN
    done
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
  fi
  if [[ "${list_mode}" == "whitelist" ]] ; then
    for appid in ${6}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j MARK --set-mark ${fwmark}
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp -j MARK --set-mark ${fwmark}
    done
    if [ -n "${AIDs}" ]; then
      for AID in ${AIDs[*]}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p tcp -j MARK --set-mark ${fwmark}
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p udp -j MARK --set-mark ${fwmark}
      done
    else
        echo "AIDs 变量为空"
    fi
  ${3} -t mangle -A ${4}_LOCAL -p udp --dport 53 -j MARK --set-mark ${fwmark}
  fi
  # Referencing custom chains
  ${3} -t mangle -A PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -A OUTPUT -j ${4}_LOCAL
  if [ ${list_switch} = true ]; then
    local list_name=$(echo ${3} | busybox awk '{print $1}')
    ${3} -t mangle -L -nv > ${0%/*}/${list_name}_mangle_rules.list
  fi
}
executeProxyRules() {
  createProxyRules ip 100 "${IPV}" Tproxy "${intranet[*]}" "${uids[*]}"
  createProxyRules "ip -6" 106 "${IP6V}" Tproxy6 "${intranet6[*]}" "${uids[*]}"
}
deleteProxyRules() {
  ${1} rule del fwmark 1 table ${2}
  ${1} route del local default dev lo table ${2}
  ${1} route flush table ${2}
  # First, delete the reference chain, otherwise the custom chain cannot be deleted.
  ${3} -t mangle -D PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -D PREROUTING -p tcp -m socket -j ${4}_DIVERT
  ${3} -t mangle -D OUTPUT -j ${4}_LOCAL
  ${3} -t mangle -D OUTPUT -j ${4}_QUIC_FILTER
  # Secondly, delete the custom rules of the custom chain.
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -F ${4}_QUIC_FILTER
  ${3} -t mangle -F ${4}_DIVERT
  # Finally, delete the custom chain.
  ${3} -t mangle -X ${4}_EXTERNAL
  ${3} -t mangle -X ${4}_LOCAL
  ${3} -t mangle -X ${4}_QUIC_FILTER
  ${3} -t mangle -X ${4}_DIVERT
  
}
executDeleteProxyRules() {
  if iptables-save | grep "Tproxy" > /dev/null; then
    deleteProxyRules ip 100 "${IPV}" Tproxy
    deleteProxyRules "ip -6" 106 "${IP6V}" Tproxy6
  fi
}
create_task() {
  if pgrep busybox crond > /dev/null ; then
    kill -9 $(pgrep busybox crond)
  fi
    echo "0 */12 * * * touch /data/adb/modules/mihomo-module/disable && sleep 3 && rm /data/adb/modules/mihomo-module/disable" > ${0%/*}/root
    nohup busybox crond -c ${0%/*}/ > /dev/null 2>&1 &
    echo -e "${green}New task:\n$(busybox crontab -l -c ${0%/*}/)${normal}"
}
delete_task() {
  if pgrep busybox crond > /dev/null ; then
    kill -9 $(pgrep busybox crond)
    rm ${0%/*}/root > /dev/null 2>&1
  fi
}
# work chain 
run_proxy() {
  sysctl -w net.ipv4.ip_forward=1
  sysctl -w net.ipv4.conf.all.route_localnet=1
  sysctl -w net.ipv6.conf.all.forwarding=1
  # sysctl -w net.ipv6.conf.all.accept_local=1
  stop_proxy
  uid_filter
  create_task
  start_proxy
}
# created by tony
